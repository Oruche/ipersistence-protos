// Code generated by protoc-gen-go.
// source: ipersistence.proto
// DO NOT EDIT!

/*
Package ipersistence is a generated protocol buffer package.

It is generated from these files:
	ipersistence.proto

It has these top-level messages:
	FetchSaveRequest
	FetchSaveReply
	UpdateTagsRequest
	BaseResultReply
	SearchByTagRequest
	SearchByTagReply
*/
package ipersistence

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type FetchSaveRequest struct {
	Url    string   `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	UserID string   `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	Tags   []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *FetchSaveRequest) Reset()                    { *m = FetchSaveRequest{} }
func (m *FetchSaveRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchSaveRequest) ProtoMessage()               {}
func (*FetchSaveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FetchSaveRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *FetchSaveRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *FetchSaveRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// The response message containing the greetings
type FetchSaveReply struct {
	ImageID string `protobuf:"bytes,1,opt,name=imageID" json:"imageID,omitempty"`
	Path    string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *FetchSaveReply) Reset()                    { *m = FetchSaveReply{} }
func (m *FetchSaveReply) String() string            { return proto.CompactTextString(m) }
func (*FetchSaveReply) ProtoMessage()               {}
func (*FetchSaveReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FetchSaveReply) GetImageID() string {
	if m != nil {
		return m.ImageID
	}
	return ""
}

func (m *FetchSaveReply) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type UpdateTagsRequest struct {
	ImageID string   `protobuf:"bytes,1,opt,name=imageID" json:"imageID,omitempty"`
	UserID  string   `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	Tags    []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *UpdateTagsRequest) Reset()                    { *m = UpdateTagsRequest{} }
func (m *UpdateTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTagsRequest) ProtoMessage()               {}
func (*UpdateTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateTagsRequest) GetImageID() string {
	if m != nil {
		return m.ImageID
	}
	return ""
}

func (m *UpdateTagsRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdateTagsRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type BaseResultReply struct {
}

func (m *BaseResultReply) Reset()                    { *m = BaseResultReply{} }
func (m *BaseResultReply) String() string            { return proto.CompactTextString(m) }
func (*BaseResultReply) ProtoMessage()               {}
func (*BaseResultReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SearchByTagRequest struct {
	Tags []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (m *SearchByTagRequest) Reset()                    { *m = SearchByTagRequest{} }
func (m *SearchByTagRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchByTagRequest) ProtoMessage()               {}
func (*SearchByTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SearchByTagRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type SearchByTagReply struct {
	Images []*SearchByTagReply_Image `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (m *SearchByTagReply) Reset()                    { *m = SearchByTagReply{} }
func (m *SearchByTagReply) String() string            { return proto.CompactTextString(m) }
func (*SearchByTagReply) ProtoMessage()               {}
func (*SearchByTagReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SearchByTagReply) GetImages() []*SearchByTagReply_Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type SearchByTagReply_Image struct {
	ImageID string   `protobuf:"bytes,1,opt,name=imageID" json:"imageID,omitempty"`
	UserID  string   `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	Path    string   `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	Tags    []string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
}

func (m *SearchByTagReply_Image) Reset()                    { *m = SearchByTagReply_Image{} }
func (m *SearchByTagReply_Image) String() string            { return proto.CompactTextString(m) }
func (*SearchByTagReply_Image) ProtoMessage()               {}
func (*SearchByTagReply_Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *SearchByTagReply_Image) GetImageID() string {
	if m != nil {
		return m.ImageID
	}
	return ""
}

func (m *SearchByTagReply_Image) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *SearchByTagReply_Image) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SearchByTagReply_Image) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*FetchSaveRequest)(nil), "ipersistence.FetchSaveRequest")
	proto.RegisterType((*FetchSaveReply)(nil), "ipersistence.FetchSaveReply")
	proto.RegisterType((*UpdateTagsRequest)(nil), "ipersistence.UpdateTagsRequest")
	proto.RegisterType((*BaseResultReply)(nil), "ipersistence.BaseResultReply")
	proto.RegisterType((*SearchByTagRequest)(nil), "ipersistence.SearchByTagRequest")
	proto.RegisterType((*SearchByTagReply)(nil), "ipersistence.SearchByTagReply")
	proto.RegisterType((*SearchByTagReply_Image)(nil), "ipersistence.SearchByTagReply.Image")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Saver service

type SaverClient interface {
	FetchSave(ctx context.Context, in *FetchSaveRequest, opts ...grpc.CallOption) (*FetchSaveReply, error)
	UpdateTags(ctx context.Context, in *UpdateTagsRequest, opts ...grpc.CallOption) (*BaseResultReply, error)
	SearchByTag(ctx context.Context, in *SearchByTagRequest, opts ...grpc.CallOption) (*SearchByTagReply, error)
}

type saverClient struct {
	cc *grpc.ClientConn
}

func NewSaverClient(cc *grpc.ClientConn) SaverClient {
	return &saverClient{cc}
}

func (c *saverClient) FetchSave(ctx context.Context, in *FetchSaveRequest, opts ...grpc.CallOption) (*FetchSaveReply, error) {
	out := new(FetchSaveReply)
	err := grpc.Invoke(ctx, "/ipersistence.Saver/FetchSave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saverClient) UpdateTags(ctx context.Context, in *UpdateTagsRequest, opts ...grpc.CallOption) (*BaseResultReply, error) {
	out := new(BaseResultReply)
	err := grpc.Invoke(ctx, "/ipersistence.Saver/UpdateTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saverClient) SearchByTag(ctx context.Context, in *SearchByTagRequest, opts ...grpc.CallOption) (*SearchByTagReply, error) {
	out := new(SearchByTagReply)
	err := grpc.Invoke(ctx, "/ipersistence.Saver/SearchByTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Saver service

type SaverServer interface {
	FetchSave(context.Context, *FetchSaveRequest) (*FetchSaveReply, error)
	UpdateTags(context.Context, *UpdateTagsRequest) (*BaseResultReply, error)
	SearchByTag(context.Context, *SearchByTagRequest) (*SearchByTagReply, error)
}

func RegisterSaverServer(s *grpc.Server, srv SaverServer) {
	s.RegisterService(&_Saver_serviceDesc, srv)
}

func _Saver_FetchSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaverServer).FetchSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipersistence.Saver/FetchSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaverServer).FetchSave(ctx, req.(*FetchSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saver_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaverServer).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipersistence.Saver/UpdateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaverServer).UpdateTags(ctx, req.(*UpdateTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saver_SearchByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaverServer).SearchByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipersistence.Saver/SearchByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaverServer).SearchByTag(ctx, req.(*SearchByTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Saver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipersistence.Saver",
	HandlerType: (*SaverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchSave",
			Handler:    _Saver_FetchSave_Handler,
		},
		{
			MethodName: "UpdateTags",
			Handler:    _Saver_UpdateTags_Handler,
		},
		{
			MethodName: "SearchByTag",
			Handler:    _Saver_SearchByTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipersistence.proto",
}

func init() { proto.RegisterFile("ipersistence.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0x41, 0x4f, 0xea, 0x40,
	0x10, 0xa6, 0xaf, 0xc0, 0x0b, 0xc3, 0xcb, 0x7b, 0x30, 0x87, 0x97, 0x86, 0x08, 0x92, 0xc6, 0x03,
	0xa7, 0x1e, 0xd0, 0xa3, 0xf1, 0xd0, 0x10, 0x93, 0xc6, 0xc4, 0xd4, 0x82, 0x07, 0x8f, 0x6b, 0x9d,
	0x94, 0x26, 0x45, 0xea, 0xee, 0xd6, 0xc8, 0xef, 0xf2, 0xc7, 0x79, 0x35, 0xbb, 0xb4, 0xb4, 0xc5,
	0x40, 0xa2, 0xb7, 0x99, 0xe9, 0x37, 0x5f, 0xbf, 0xfd, 0xbe, 0x5d, 0xc0, 0x38, 0x25, 0x2e, 0x62,
	0x21, 0xe9, 0x39, 0x24, 0x27, 0xe5, 0x6b, 0xb9, 0xc6, 0x3f, 0xd5, 0x99, 0xed, 0x43, 0xef, 0x9a,
	0x64, 0xb8, 0x9c, 0xb3, 0x57, 0x0a, 0xe8, 0x25, 0x23, 0x21, 0xb1, 0x07, 0x66, 0xc6, 0x13, 0xcb,
	0x18, 0x1b, 0x93, 0x4e, 0xa0, 0x4a, 0xfc, 0x0f, 0xed, 0x4c, 0x10, 0xf7, 0x66, 0xd6, 0x2f, 0x3d,
	0xcc, 0x3b, 0x44, 0x68, 0x4a, 0x16, 0x09, 0xcb, 0x1c, 0x9b, 0x93, 0x4e, 0xa0, 0x6b, 0xfb, 0x0a,
	0xfe, 0x56, 0x18, 0xd3, 0x64, 0x83, 0x16, 0xfc, 0x8e, 0x57, 0x2c, 0x22, 0x6f, 0x96, 0x73, 0x16,
	0xad, 0xda, 0x4f, 0x99, 0x5c, 0xe6, 0xac, 0xba, 0xb6, 0x1f, 0xa0, 0x7f, 0x9f, 0x3e, 0x31, 0x49,
	0x0b, 0x16, 0x89, 0x42, 0xd2, 0x61, 0x8a, 0xef, 0x48, 0xeb, 0xc3, 0x3f, 0x97, 0x09, 0x0a, 0x48,
	0x64, 0x89, 0xd4, 0xda, 0xec, 0x09, 0xe0, 0x9c, 0x18, 0x0f, 0x97, 0xee, 0x66, 0xc1, 0xa2, 0xe2,
	0x77, 0xc5, 0xb2, 0x51, 0x59, 0x7e, 0x37, 0xa0, 0x57, 0x83, 0xaa, 0xa3, 0x5d, 0x42, 0x5b, 0x0b,
	0xd9, 0x42, 0xbb, 0xd3, 0x33, 0xa7, 0xe6, 0xf8, 0x3e, 0xde, 0xf1, 0x14, 0x38, 0xc8, 0x77, 0x06,
	0x0c, 0x5a, 0x7a, 0xf0, 0xb3, 0xe3, 0x69, 0xe7, 0xcc, 0xd2, 0xb9, 0x9d, 0xea, 0x66, 0xa9, 0x7a,
	0xfa, 0x61, 0x40, 0x4b, 0x25, 0xc1, 0xf1, 0x06, 0x3a, 0xbb, 0x5c, 0x70, 0x54, 0xd7, 0xb9, 0x7f,
	0x05, 0x06, 0x27, 0x07, 0xbf, 0x2b, 0xd3, 0x1a, 0x78, 0x0b, 0x50, 0x86, 0x84, 0xa7, 0x75, 0xf4,
	0x97, 0xf8, 0x06, 0xc3, 0x3a, 0x60, 0x3f, 0x84, 0x06, 0xde, 0x41, 0xb7, 0xe2, 0x15, 0x8e, 0x8f,
	0xd8, 0xb8, 0x65, 0x1c, 0x1d, 0x37, 0xda, 0x6e, 0xb8, 0x17, 0x30, 0x8c, 0xd7, 0x4e, 0xc4, 0xd3,
	0xd0, 0xa1, 0x37, 0xb6, 0x4a, 0x13, 0x12, 0xb5, 0x1d, 0xb7, 0xef, 0xf9, 0x65, 0xe7, 0xab, 0xb7,
	0xe1, 0x1b, 0x8f, 0x6d, 0xfd, 0x48, 0xce, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x39, 0x7e, 0x8b,
	0xdc, 0x3a, 0x03, 0x00, 0x00,
}
